<Controls:MetroWindow
        xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"  
        xmlns:local="clr-namespace:AssemblyFireView"
        xmlns:fa="clr-namespace:FontAwesome.WPF;assembly=FontAwesome.WPF"
    xmlns:ControlzEx="clr-namespace:ControlzEx;assembly=MahApps.Metro"
    x:Name="AssemblyFire" x:Class="AssemblyFireView.Cheatsheet"                   
          xmlns:fac="clr-namespace:FontAwesome.WPF.Converters;assembly=FontAwesome.WPF"
           
    mc:Ignorable="d"    
        Title="InfoDialog" Height="475" Width="750" ResizeMode="NoResize" ShowInTaskbar="False" WindowStartupLocation="CenterOwner" BorderThickness="1" BorderBrush="#FF007ACC" WindowStyle="None" IsCloseButtonEnabled="False" IsMaxRestoreButtonEnabled="False" IsMinButtonEnabled="False" LeftWindowCommandsOverlayBehavior="HiddenTitleBar" RightWindowCommandsOverlayBehavior="Never" ShowCloseButton="False" ShowIconOnTitleBar="False" ShowMaxRestoreButton="False" ShowMinButton="False" ShowSystemMenuOnRightClick="False" ShowTitleBar="False" TitleCaps="False" TitleCharacterCasing="Normal">



    <DockPanel LastChildFill="True" Background="#FF252526">
        <!-- TITLE -->
        <DockPanel DockPanel.Dock="Top" Background="#FF2D2D30" Margin="0,0,0,0" MinHeight="30" VerticalAlignment="Center" MaxHeight="23">

            <Grid Margin="11,0,12,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <TextBlock  x:Name="txtTitle" FontSize="16" Foreground="#FFF0F0F0" Text="Cheatsheet" UseLayoutRounding="False" VerticalAlignment="Center" LineStackingStrategy="BlockLineHeight" HorizontalAlignment="Left"/>

            </Grid>
        </DockPanel>

        <!-- BUTTONS -->
        <StackPanel Margin="10,0,10,10" Orientation="Horizontal" DockPanel.Dock="Bottom" FlowDirection="RightToLeft" ClipToBounds="True">
            <Button x:Name="btnSi" Click="btnSi_Click" Style="{DynamicResource SquareButtonStyle}" Margin="0,0,7,0" Padding="10,5"  BorderBrush="#FF3399FF" BorderThickness="0,0,0,3" MinWidth="70" IsCancel="True" IsDefault="True">
                <StackPanel Orientation="Horizontal" FlowDirection="LeftToRight">
                    <TextBlock Text="&#xf078;" TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontWeight="Light" FontSize="14" Foreground="LightGreen"  Margin="0,3,5,0"/>
                    <TextBlock Text="Ocultar" FontSize="15" FontWeight="Normal" VerticalAlignment="Center" />
                </StackPanel>
            </Button>
        </StackPanel>

        <!-- DATA -->
        <Grid MaxWidth="650" Margin="0,10">
            <!-- OUT GRID -->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!-- ADD/SUB -->
            <Border Grid.Column="0" Grid.Row="0" BorderThickness="0,0,0,1" >
                <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
                </Border.BorderBrush>
                <Grid MaxWidth="650">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="75"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <TextBlock Text="&#xf111;" Grid.Column="0" Grid.Row="0" TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontSize="15" Foreground="CornflowerBlue"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <TextBlock Text="ADD/SUB" Grid.Column="1" Grid.Row="0" Foreground="CornflowerBlue" FontWeight="Bold" VerticalAlignment="Center" Margin="10,0" HorizontalAlignment="Left"/>
                    <TextBlock Grid.Column="2" Grid.Row="0" Text="Las instrucciones ADD y SUB permiten realizar sumas y restas respectivamente. Se requieren 3 parametros, el primero es el registro de destino para el resulto, el segundo es el primer operando y el tercero es el segundo operando, este ultimo puede ser tanto un registro como un valor numerico" TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                </Grid>
            </Border>

            <!-- MOV -->
            <Border Grid.Column="0" Grid.Row="1" BorderThickness="0,0,0,1" >
                <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
                </Border.BorderBrush>
                <Grid MaxWidth="650">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="75"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <TextBlock Text="&#xf111;" Grid.Column="0" Grid.Row="0" TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontSize="15" Foreground="CornflowerBlue"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <TextBlock Text="MOV" Grid.Column="1" Grid.Row="0" Foreground="CornflowerBlue" FontWeight="Bold" VerticalAlignment="Center" Margin="10,0" HorizontalAlignment="Left"/>
                    <TextBlock Grid.Column="2" Grid.Row="0" Text="MOV permite almacenar un valor en un registro. Requiere dos parametros, primero el registro donde se guardara el valor y segundo el valor, el cual puede venir dado por un registro o un valor numerico." TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                </Grid>
            </Border>

            <!-- STR/LDR -->
            <Border Grid.Column="0" Grid.Row="2" BorderThickness="0,0,0,1" >
                <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
                </Border.BorderBrush>
                <Grid MaxWidth="650">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="75"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <TextBlock Text="&#xf111;" Grid.Column="0" Grid.Row="0" TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontSize="15" Foreground="CornflowerBlue"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <TextBlock Text="STR/LDR" Grid.Column="1" Grid.Row="0" Foreground="CornflowerBlue" FontWeight="Bold" VerticalAlignment="Center" Margin="10,0" HorizontalAlignment="Left"/>
                    <TextBlock Grid.Column="2" Grid.Row="0" Text="STR y LDR permiten respectivamente guardar/cargar valores de memoria. Requieren dos parametros, primero el registro donde esta el valor y segundo la posicion de memoria donde se guardara/obtendra el valor (Esta debe estar almacenada en un registro)." TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                </Grid>
            </Border>

            <!-- CMP -->
            <Border Grid.Column="0" Grid.Row="3" BorderThickness="0,0,0,1" >
                <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
                </Border.BorderBrush>
                <Grid MaxWidth="650">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="75"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <TextBlock Text="&#xf111;" Grid.Column="0" Grid.Row="0" TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontSize="15" Foreground="CornflowerBlue"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <TextBlock Text="CMP" Grid.Column="1" Grid.Row="0" Foreground="CornflowerBlue" FontWeight="Bold" VerticalAlignment="Center" Margin="10,0" HorizontalAlignment="Left"/>
                    <TextBlock Grid.Column="2" Grid.Row="0" Text="CMP permite realizar la comparacion de dos numeros. Requiere dos parametros correspondientes a los registros donde estan los valores a comprar. Luego de la comparacion se modifican los flags (Requerido para las condiciones de bifurcaciones o 'branchs' en el flujo)." TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                </Grid>
            </Border>

            <!-- B* -->
            <Border Grid.Column="0" Grid.Row="4" BorderThickness="0" >
                <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
                </Border.BorderBrush>
                <Grid MaxWidth="650">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="75"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <TextBlock Text="&#xf111;" Grid.Column="0" Grid.Row="0" TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontSize="15" Foreground="CornflowerBlue"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <TextBlock Text="B/*" Grid.Column="1" Grid.Row="0" Foreground="CornflowerBlue" FontWeight="Bold" VerticalAlignment="Center" Margin="10,0" HorizontalAlignment="Left"/>
                    <TextBlock Grid.Column="2" Grid.Row="0" Text="Permite realizar un salto a la posicion de memoria indicada por el unico parametro si se cumple la condicion del salto (CMP). Las condiciones posibles son: B (Siempre), BEQ (A=B), BNE (A!=B), BGT (A&gt;B), BLT (A&lt;B), BGE (A&gt;=B), BLE (A&lt;=B)." TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                </Grid>
            </Border>





        </Grid>
        <!-- OUT GRID -->



    </DockPanel>
</Controls:MetroWindow>